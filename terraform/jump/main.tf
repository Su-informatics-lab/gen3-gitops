# Terraform configuration is now managed by Terragrunt
# The provider and backend configuration will be generated by Terragrunt

# ==============================================================================
# DATA SOURCES
# ==============================================================================

data "aws_caller_identity" "current" {}

data "aws_iam_user" "gen3_tf_user" {
  user_name = var.gen3_tf_user
}

data "aws_iam_policy" "ssm_managed_instance_core" {
  arn = "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
}

data "aws_ami" "admin" {
  owners      = ["self"]
  most_recent = true

  filter {
    name   = "name"
    values = [var.ami_filter]
  }

  filter {
    name   = "state"
    values = ["available"]
  }
}

data "aws_s3_bucket" "gen3_config" {
  bucket = "cdis-state-ac${data.aws_caller_identity.current.account_id}-gen3"
}

data "template_cloudinit_config" "admin" {
  gzip          = true
  base64_encode = true

  part {
    content_type = "text/cloud-config"
    content = templatefile("${path.module}/templates/write_files.tpl", {
      region  = var.region,
      admin   = module.admin_role.iam_role_arn,
      profile = var.gen3_profile,
      user    = var.admin_user
    })
  }
}

# ==============================================================================
# VPC MODULE
# ==============================================================================

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "~> 5.8"  # Use a more recent version compatible with AWS provider 5.60+

  count = var.create_vpc ? 1 : 0

  name = "${var.prefix}-vpc"
  cidr = var.vpc_cidr

  azs             = [var.zone]
  public_subnets  = [var.public_subnet_cidr]
  private_subnets = [var.private_subnet_cidr]

  enable_nat_gateway = var.enable_nat_gateway
  enable_vpn_gateway = false
  single_nat_gateway = true

  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name        = "${var.prefix}-vpc"
    Environment = var.prefix
    Terraform   = "true"
  }

  public_subnet_tags = {
    Name = "${var.prefix}-public-subnet"
    Type = "Public"
  }

  private_subnet_tags = {
    Name = "${var.prefix}-private-subnet"
    Type = "Private"
  }
}

# ==============================================================================
# SECURITY GROUP MODULE
# ==============================================================================

module "security_group" {
  source  = "terraform-aws-modules/security-group/aws"
  version = "~> 5.1"  # Use a more recent version compatible with AWS provider 5.60+

  count = var.create_vpc ? 1 : 0

  name        = "${var.prefix}-sg"
  description = "Security group for ${var.prefix} admin instances"
  vpc_id      = module.vpc[0].vpc_id

  # No ingress rules needed for Session Manager
  ingress_rules = []

  # Allow all outbound traffic
  egress_rules = ["all-all"]

  tags = {
    Name        = "${var.prefix}-sg"
    Environment = var.prefix
    Terraform   = "true"
  }
}

# ==============================================================================
# IAM MODULES
# ==============================================================================

# Instance IAM Role
module "instance_iam_role" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role"
  version = "~> 5.20"  # Use a more recent version compatible with AWS provider 5.60+

  create_role             = true
  create_instance_profile = true
  role_name               = "${var.prefix}-instance-role"
  role_requires_mfa       = false

  trusted_role_services = ["ec2.amazonaws.com"]

  custom_role_policy_arns = [
    data.aws_iam_policy.ssm_managed_instance_core.arn,
    aws_iam_policy.adminvm.arn
  ]

  tags = {
    Name        = "${var.prefix}-instance-role"
    Environment = var.prefix
    Terraform   = "true"
  }
}

# Admin Role Module (for Gen3 operations)
module "admin_role" {
  source  = "terraform-aws-modules/iam/aws//modules/iam-assumable-role"
  version = "~> 5.20"  # Use a more recent version compatible with AWS provider 5.60+

  create_role             = true
  create_instance_profile = false
  role_name               = var.prefix
  role_requires_mfa       = false

  # https://aws.amazon.com/blogs/security/announcing-an-update-to-iam-role-trust-policy-behavior/
  allow_self_assume_role = true

  trusted_role_arns = [
    data.aws_iam_user.gen3_tf_user.arn,
    module.instance_iam_role.iam_role_arn
  ]

  custom_role_policy_arns = [
    aws_iam_policy.gen3_services.arn,
    data.aws_iam_policy.ssm_managed_instance_core.arn
  ]

  tags = {
    Name        = "${var.prefix}-admin-role"
    Environment = var.prefix
    Terraform   = "true"
  }
}

# ==============================================================================
# IAM POLICIES
# ==============================================================================

# IAM Policy for Gen3 Services
resource "aws_iam_policy" "gen3_services" {
  name        = "${var.prefix}-gen3-services"
  description = "AWS services required for Gen3"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid    = "Gen3RequiredServices"
        Effect = "Allow"
        Action = [
          "application-autoscaling:*",
          "sns:*",
          "rds:*",
          "s3:*",
          "cloudtrail:*",
          "logs:*",
          "autoscaling-plans:*",
          "sqs:*",
          "iam:*",
          "cloudwatch:*",
          "kms:*",
          "lambda:*",
          "route53:*",
          "ec2:*",
          "eks:*",
          "es:*",
          "ecs:DescribeServices",
          "ecs:UpdateService",
          "autoscaling:*",
          "ecr:*",
          "events:*",
          "ecr-public:GetAuthorizationToken",
          "sts:GetServiceBearerToken"
        ]
        Resource = "*"
      }
    ]
  })

  tags = {
    Name        = "${var.prefix}-gen3-services"
    Environment = var.prefix
    Terraform   = "true"
  }
}

# IAM Policy for Admin VM
resource "aws_iam_policy" "adminvm" {
  name        = "${var.prefix}-adminvm"
  description = "Policy for admin VM instance"

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid    = "AdminVMPermissions"
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:ListBucket",
          "ssm:GetParameter",
          "ssm:GetParameters",
          "ssm:GetParametersByPath",
          "sts:AssumeRole",
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:GetLogEvents",
          "logs:PutLogEvents",
          "logs:DescribeLogGroups",
          "logs:DescribeLogStreams",
          "logs:PutRetentionPolicy"
        ]
        Resource = [
          data.aws_s3_bucket.gen3_config.arn,
          "${data.aws_s3_bucket.gen3_config.arn}/*",
          "arn:aws:ssm:*:*:parameter/gen3/*",
          module.admin_role.iam_role_arn,
          "*"
        ]
      }
    ]
  })

  tags = {
    Name        = "${var.prefix}-adminvm"
    Environment = var.prefix
    Terraform   = "true"
  }
}

# ==============================================================================
# EC2 MODULE
# ==============================================================================

module "ec2_instance" {
  source  = "terraform-aws-modules/ec2-instance/aws"
  version = "~> 5.6"  # Use a more recent version compatible with AWS provider 5.60+

  count = var.create_ec2 ? 1 : 0

  name = var.prefix

  ami                         = data.aws_ami.admin.id
  instance_type               = var.instance_type
  key_name                    = var.key_name
  monitoring                  = true
  vpc_security_group_ids      = var.create_vpc ? [module.security_group[0].security_group_id] : []
  subnet_id                   = var.create_vpc ? module.vpc[0].private_subnets[0] : null
  associate_public_ip_address = false

  iam_instance_profile = module.instance_iam_role.iam_instance_profile_name

  user_data_base64 = data.template_cloudinit_config.admin.rendered

  root_block_device = [
    {
      volume_type           = "gp3"
      volume_size           = 50
      iops                  = 3000
      throughput            = 125
      delete_on_termination = true
      encrypted             = true
    }
  ]

  tags = {
    Name        = var.prefix
    Environment = var.prefix
    Terraform   = "true"
  }
}
